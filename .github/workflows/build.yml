name: Build

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: obc-nucleo
            board: nucleo_g431rb
            path: ./apps/obc
            overlay: ${FINCH_FLIGHT_SOFTWARE_ROOT}/boards/overlays/nucleo_g431rb.overlay
          - name: pay-native
            board: native_sim
            path: ./apps/pay
          - name: pay-nucleo
            board: nucleo_h743zi
            path: ./apps/pay
            overlay: ${FINCH_FLIGHT_SOFTWARE_ROOT}/boards/overlays/nucleo_h743zi.overlay
          - name: eps-native
            board: native_sim
            path: ./apps/eps

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh

      - name: Setup Python venv
        run: |
          chmod +x ./scripts/setup_python_venv.sh
          ./scripts/setup_python_venv.sh

      - name: Setup west workspace
        run: |
          chmod +x ./scripts/setup_west_workspace.sh
          ./scripts/setup_west_workspace.sh

      - name: Builds
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          source ../.venv/bin/activate
          source ../zephyr/zephyr-env.sh
          source finch-flight-software-env.sh

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Running on PR — checking all commits..."
            commits=$(gh pr view ${{ github.event.number }} --repo ${{ github.repository }} --json commits --jq '.commits[].oid')
          else
            echo "Running on push to main — checking HEAD only..."
            commits=$(git rev-parse HEAD)
          fi

          echo "Commit list: $commits"

          EXTRA_ARGS=""
          if [ -f "${{ matrix.overlay }}" ]; then
            EXTRA_ARGS="-- -DDTC_OVERLAY_FILE=${{ matrix.overlay }}"
          fi

          failed_commits=""

          for commit in $commits; do
            echo "::group::Building $commit"

            git checkout $commit
            rm -rf build/
            set +e
            west -v build -b ${{ matrix.board }} ${{ matrix.path }} -p $EXTRA_ARGS
            build_status=$?
            set -e

            echo "::endgroup::"

            if [ $build_status -ne 0 ]; then
              echo "Failed to build $commit."
              failed_commits+="$commit "
            fi
          done

          echo "Board: ${{ matrix.board }}, path: ${{ matrix.path }}."
          if [ -z "$failed_commits" ]; then
            echo "All commits are built successfully."
            exit 0
          else
            echo "One or more commits failed: $failed_commits."
            exit 1
          fi
